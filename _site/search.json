[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About MLeRP",
    "section": "",
    "text": "MLeRP is split into two clusters which users can choose between - one based in Monash (Melbourne, Victoria) and one based in QCIF (Brisbane, Queensland). The clusters have seperate file systems, so you will have to transfer your files across if you’d like to switch regions."
  },
  {
    "objectID": "about.html#compute",
    "href": "about.html#compute",
    "title": "About MLeRP",
    "section": "Compute",
    "text": "Compute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nPartition\nNodes\nCPU Cores per node\nTotal CPU cores in partition\nMemory per node (GB)\nCPU Speed\nProcessor model\nCodename\n\n\n\n\nx\nx\nx\nx\nx\nx\nx\nx\nx"
  },
  {
    "objectID": "about.html#gpu-compute",
    "href": "about.html#gpu-compute",
    "title": "About MLeRP",
    "section": "GPU Compute",
    "text": "GPU Compute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nPartition\nNodes\nCPU Cores per node\nTotal CPU cores in partition\nMemory per node (GB)\nNumber of GPUs per node\nTotal GPUs in partition\nGPU model\nGPU cores per card\nCPU Speed\nProcessor model\nCodename\n\n\n\n\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx"
  },
  {
    "objectID": "about.html#remote-desktops-through-the-cvl",
    "href": "about.html#remote-desktops-through-the-cvl",
    "title": "About MLeRP",
    "section": "Remote desktops through the CVL",
    "text": "Remote desktops through the CVL\nI assume we cut this?"
  },
  {
    "objectID": "about.html#compute-1",
    "href": "about.html#compute-1",
    "title": "About MLeRP",
    "section": "Compute",
    "text": "Compute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nPartition\nNodes\nCPU Cores per node\nTotal CPU cores in partition\nMemory per node (GB)\nCPU Speed\nProcessor model\nCodename\n\n\n\n\nx\nx\nx\nx\nx\nx\nx\nx\nx"
  },
  {
    "objectID": "about.html#gpu-compute-1",
    "href": "about.html#gpu-compute-1",
    "title": "About MLeRP",
    "section": "GPU Compute",
    "text": "GPU Compute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nPartition\nNodes\nCPU Cores per node\nTotal CPU cores in partition\nMemory per node (GB)\nNumber of GPUs per node\nTotal GPUs in partition\nGPU model\nGPU cores per card\nCPU Speed\nProcessor model\nCodename\n\n\n\n\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx"
  },
  {
    "objectID": "about.html#remote-desktops-through-the-cvl-1",
    "href": "about.html#remote-desktops-through-the-cvl-1",
    "title": "About MLeRP",
    "section": "Remote desktops through the CVL",
    "text": "Remote desktops through the CVL\nI assume we cut this?"
  },
  {
    "objectID": "dask-pytorch.html",
    "href": "dask-pytorch.html",
    "title": "MLeRP User Guide Documentation",
    "section": "",
    "text": "PyTorch and Dask\n\nDefining models, datasets and functions\nIf you’re doing something relatively simple, Dask has integrations with Scikit-Learn and XGBoost. You can also pass PyTorch models into Scikit-Learn with Skorch and TensorFlow models with SciKeras.\nBut if you need to do something more complex, Dask clusters can have python functions submitted to them to remotely execute code. This gives us the low level control to implement whatever bespoke algorithm we want and have it accelerated by remote GPUs.\nIn this example we’re going to write our own PyTorch functions to train a custom model on the CIFAR dataset. While we could do this with Skorch, we hope that this example gives you some idea of how Dask can be flexible enough for any applications that you need.\nContent adapted from: https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html\n\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.multiprocessing as mp\n\n# Define data transformations\ntransform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n\n# Define dataset and dataloader\nbatch_size = 1024\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n                                        download=True, transform=transform)\nvalidset = torchvision.datasets.CIFAR10(root='./data', train=False,\n                                        download=True, transform=transform)\n\n# Note that we need to set the multiprocessing context so that PyTorch doesn't get\n# PyTorch likes to use 'forking' while Dask uses 'spawn'\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n                                          shuffle=True, num_workers=16, multiprocessing_context=mp.get_context(\"fork\"))\nvalidloader = torch.utils.data.DataLoader(validset, batch_size=batch_size,\n                                          shuffle=True, num_workers=16, multiprocessing_context=mp.get_context(\"fork\"))\n\nFiles already downloaded and verified\nFiles already downloaded and verified\n\n\n\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Define loss function\ncriterion = nn.CrossEntropyLoss()\n\n# Define a simple conv net\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Convolutional layers\n        self.conv1 = nn.Conv2d(3, 16, 3, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(16, 16, 3, stride=1, padding=1)\n        self.conv3 = nn.Conv2d(16, 32, 3, stride=2, padding=1)\n        self.conv4 = nn.Conv2d(32, 32, 3, stride=1, padding=1)\n        self.conv5 = nn.Conv2d(32, 64, 3, stride=2, padding=1)\n        self.conv6 = nn.Conv2d(64, 64, 3, stride=1, padding=1)\n        \n        # Fully connected layers\n        self.fc1 = nn.Linear(4 * 4 * 64, 4 * 64)\n        self.fc2 = nn.Linear(4 * 64, 64)\n        self.fc3 = nn.Linear(64, 10)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        x = F.relu(self.conv3(x))\n        x = F.relu(self.conv4(x))\n        x = F.relu(self.conv5(x))\n        x = F.relu(self.conv6(x))\n        x = torch.flatten(x, 1)  # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nThis train function will load any saved state for the provided model, then train for a number of epochs. When its done it will then save the state and return the average loss of the last epoch.\nThere are also a few flags which have been included to show the printing and error handling behaviour of dask clusters.\n\nimport torch.optim as optim\nfrom tqdm.notebook import tqdm\n\n\n# loader: train dataloader\n# arch: model archetechture for training\n# path: model path for load and save\n# load: whether to load model from path\n# save: whether to save model to path\n# test: only run one batch for testing\n# error: throw an assertion error\n# return: average loss of epoch or loss of one batch if testing\ndef train(loader, arch=Net, path=\"./model\", epochs=1, load=False, save=True, test=False, error=False):\n    model = arch()\n    optimizer = optim.Adam(model.parameters(), lr=3e-4)\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    \n    # Load state from disk so that we can split up the job\n    if load: \n        state = torch.load(path, map_location=\"cpu\")\n        model.load_state_dict(state[\"model\"])\n        model.to(device)\n        optimizer.load_state_dict(state[\"optimizer\"])\n    else:\n        model.to(device)\n    \n    # A typical PyTorch training loop\n    model.train()\n    for _ in range(epochs):\n        running_loss = 0\n        \n        for i, (inputs, labels) in enumerate(loader):\n            # put the inputs on the device\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            # zero the parameter gradients\n            optimizer.zero_grad()\n\n            # forward + backward + optimize\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.detach().item()\n            \n            # Force an error\n            if error:\n                assert 0 == 1\n            \n            # Stop after one batch when testing        \n            if test: \n                print(\"When running in a local cluster you can see print statements\")\n                break\n    \n    # Save model after each epoch\n    if save:\n        torch.save({\n            \"model\": model.state_dict(),\n            \"optimizer\": optimizer.state_dict()\n            }, path)\n    \n    return running_loss / len(loader) if not test else loss.detach().item()\n\nThis valid function will load the state of the model we’ve defined, then calculate the average loss and accuracy over the dataset.\n\n# loader: train dataloader\n# arch: model archetechture for validating\n# path: model path for load and save\n# return: average loss and accuracy of epoch\ndef valid(loader, arch=Net, path=\"./model\"):\n    # Initialise device\n    model = arch()\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n    # Load state from disk so that we can split up the job\n    state = torch.load(path, map_location=\"cpu\")\n    model.load_state_dict(state[\"model\"])\n    model.to(device)\n    model.eval()\n    \n    # A typical PyTorch validation loop\n    running_loss = 0\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for i, (inputs, labels) in enumerate(loader):\n            # put the inputs on the device\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            # forward\n            outputs = model(inputs)\n            \n            # loss\n            loss = criterion(outputs, labels)\n            running_loss += loss.detach().item()\n            \n            # accuracy\n            _, predicted = torch.max(outputs.data, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    return running_loss / len(loader), correct / total\n\n\n\nTesting with a LocalCluster\nDask LocalClusters are easiest to use interactive development. This will mean that code will execute in the notebook session allowing you to view print statements and debug errors normally rather than dealing with remote code execusion before we’re ready. Later, when you are satisfied with your code you can switch over to a SLURMCluster to accelerate with GPU.\nDask prefers to control all processes so that it can manage them more gracefully if they fail, but we need to give PyTorch the control to use multiprocessing as needed. To do this set proccesses=False to allow for multiprocessing inside Dask jobs.\n\nfrom distributed import Client, LocalCluster\n\ncluster = LocalCluster(processes=False)\nclient = Client(cluster)\nclient\n\n/userdata/mhar0048/miniconda/conda/envs/dask/lib/python3.10/site-packages/distributed/node.py:179: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 41665 instead\n  warnings.warn(\n\n\n\n\n     \n    \n        Client\n        Client-a5aae8d9-bbdd-11ed-a7fd-fa163e16ef68\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: distributed.LocalCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://192.168.0.213:41665/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        daf492d3\n        \n            \n                \n                    Dashboard: http://192.168.0.213:41665/status\n                \n                \n                    Workers: 1\n                \n            \n            \n                \n                    Total threads: 20\n                \n                \n                    Total memory: 590.14 GiB\n                \n            \n            \n            \n    Status: running\n    Using processes: False\n\n\n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-ba375271-3eec-4370-923c-27c43ee917a0\n            \n                \n                    \n                        Comm: inproc://192.168.0.213/387069/1\n                    \n                    \n                        Workers: 1\n                    \n                \n                \n                    \n                        Dashboard: http://192.168.0.213:41665/status\n                    \n                    \n                        Total threads: 20\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 590.14 GiB\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n                    \n                        \n                            Comm:  inproc://192.168.0.213/387069/4\n                        \n                        \n                            Total threads:  20\n                        \n                    \n                    \n                        \n                            Dashboard:  http://192.168.0.213:36253/status\n                        \n                        \n                            Memory:  590.14 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  None\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /tmp/dask-worker-space/worker-rhvj9n9u\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n\n    \n\n\n        \n    \n\n            \n        \n\n    \n\n\n\nWe can submit our function to the cluster with the client.submit method. This will return a future which can be unpacked with its result using future.result(). We can see the outputs of print statements while we’re using a LocalCluster. Print statements will not be visible when executing remotely with SLURMCluster.\n\nfuture = client.submit(train, trainloader, test=True)\nfuture.result()\n\n/userdata/mhar0048/miniconda/conda/envs/dask/lib/python3.10/site-packages/distributed/worker.py:2845: UserWarning: Large object of size 146.58 MiB detected in task graph: \n  [<torch.utils.data.dataloader.DataLoader object at 0x7fa2783c7af0>]\nConsider scattering large objects ahead of time\nwith client.scatter to reduce scheduler burden and \nkeep data on workers\n\n    future = client.submit(func, big_data)    # bad\n\n    big_future = client.scatter(big_data)     # good\n    future = client.submit(func, big_future)  # good\n  warnings.warn(\n\n\nWhen running in a local cluster you can see print statements\n\n\n2.3040761947631836\n\n\nWe can use the client.scatter method to scatter large objects out to our workers ahead of time for more efficient execution.\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader, test=True).result()\n\nWhen running in a local cluster you can see print statements\n\n\n2.3033735752105713\n\n\n\nclient.shutdown()\n\n\n\nTraining with a SLURMCluster\nDask usually uses a ‘nanny’ that monitors any worker processes and gracefully restarts them if they fail or are killed while performing computations. The nanny is not compatable with daemonic processes - that is dask workers cannot perform multiprocessing while it’s being used. We therefore need to set nanny=False to turn off the nanny to allow for multiprocessing inside Dask jobs for the cluster to work with PyTorch. (Just like when we processes=False for the LocalCluster.)\nWe can pass in extra SLURM requirements in job_extra_directives to request a GPU for our jobs. To read more about configuring the SLURMCluster to interact with the SLURM queue, go to Dask’s jobqueue documentation.\n\nfrom dask_jobqueue import SLURMCluster\nfrom distributed import Client\ncluster = SLURMCluster(\n    memory=\"190g\", processes=1, cores=20, job_extra_directives=[\"--gres=gpu:1\"], nanny=False\n)\n\ncluster.scale(1)\nclient = Client(cluster)\n\n/userdata/mhar0048/miniconda/conda/envs/dask/lib/python3.10/site-packages/distributed/node.py:179: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 34527 instead\n  warnings.warn(\n\n\nSince this code is executing remotely we won’t see our print statements\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader_future, test=True).result()\n\n2.3033061027526855\n\n\nDask will raise any errors that the process triggers locally, even when executing remotely\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader_future, error=True).result()\n\nAssertionError: \n\n\nFinally we can bring everything together and run our training loop.\n\n# Run the training loop\nepochs = 5\ntrainloader_future = client.scatter(trainloader)\nvalidloader_future = client.scatter(validloader)\nwith tqdm(total=(epochs)) as pbar:\n    for epoch in range(epochs):\n        train_loss = client.submit(train, trainloader_future, load=(epoch > 0)).result()\n        valid_loss, accuracy = client.submit(valid, validloader_future).result()\n        pbar.update()\n        pbar.set_postfix(loss=train_loss)\n        print( f\"epoch: {epoch}, train_loss: {train_loss : .3f}, valid_loss: {valid_loss : .3f}, accuracy: {accuracy : .3f}\")\n\n\n\n\nepoch: 0, train_loss:  2.271, valid_loss:  2.142, accuracy:  0.206\nepoch: 1, train_loss:  2.019, valid_loss:  1.934, accuracy:  0.284\nepoch: 2, train_loss:  1.897, valid_loss:  1.834, accuracy:  0.322\nepoch: 3, train_loss:  1.816, valid_loss:  1.766, accuracy:  0.344\nepoch: 4, train_loss:  1.750, valid_loss:  1.700, accuracy:  0.368\n\n\n\n\nMeasuring Dask’s overhead\nOffloading tasks to Dask doesn’t come for free, there is an initial cost associated with sending the data to a remote device. Let’s compare the time it would take to train a Resnet18 on CIFAR for a range of epochs comparing a local GPU, a remote GPU using Dask and a remote GPU using Dask with a scattered dataset. For this expriment we will not bother saving the weights afterwards since this should be relatively constant between methods.\n\nfrom torchvision.models import resnet18\nfrom time import time\n\n# Store times in arrays\nlocal = []\nremote = []\nscatter = []\n\n# Test some number of epochs\nepoch_list = [1, 2, 3, 5, 10]\nwith tqdm(total=(len(epoch_list) * 3)) as pbar:\n    for num_epochs in epoch_list:\n        \n        # Local GPU\n        start = time()\n        train(trainloader, arch=resnet18, epochs=(num_epochs + 1), save=False)\n        local.append(time() - start)\n        pbar.update()\n        \n        # Remote GPU\n        start = time()\n        client.submit(train, trainloader, arch=resnet18, epochs=(num_epochs + 1), save=False).result()\n        remote.append(time() - start)\n        pbar.update()\n        \n        # Remote GPU with scatter\n        start = time()\n        trainloader_future = client.scatter(trainloader)\n        client.submit(train, trainloader_future, arch=resnet18, epochs=(num_epochs + 1), save=False).result()\n        scatter.append(time() - start)\n        pbar.update()\n\n\n\n\n\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\ndata = list(chain(*zip(local, remote, scatter)))\ncolumns = []\nfor num_epochs in epoch_list:\n    for test in [\"local\", \"remote\", \"scatter\"]:\n        columns.append(test + \" \" + str(num_epochs))\n\nplt.bar(range(len(data)), data, tick_label=columns)\nplt.xticks(rotation=90)\nplt.xlabel(\"Experiment\")\nplt.ylabel(\"Seconds\")\nplt.title(\"Runtime comparison for local, remote and scatter\")\nplt.show()\n\n\n\n\nFrom this experiment we can see that the cost associated with running code remotely is small, and the impact decreases with the size of the function that we submit. It also shows that it always makes sense to scatter large objects before computing, even for small jobs.\n\nclient.shutdown()"
  },
  {
    "objectID": "dask-slurm.html",
    "href": "dask-slurm.html",
    "title": "MLeRP User Guide Documentation",
    "section": "",
    "text": "Dask SLURMClusters\nThe MLeRP notebook environment uses Dask SLURMClusters to create a middle ground that has the interactivity of a notebook backed by the power of HPC. You will be provisioned with a CPU based notebook session for your basic analysis and code development. Then, when you’re ready to run testsm you will use Dask to submit your python functions to the SLURM queue.\nThis enables: - Flexibility to experiment with your dataset interactively - Ability to change compute requirements such as RAM, size of GPU, number of processes and so on… without ever leaving the notebook environment - Elastic scaling of compute - Efficient utilisation of the hardware - Releasing of resources when not in use\n\nfrom dask_jobqueue import SLURMCluster\nfrom distributed import Client, LocalCluster\nimport dask\n\n# Point Dask to the SLURM to use as it's back end\ncluster = SLURMCluster(\n    memory=\"64g\", processes=1, cores=8\n)\n\n# Scale out to 4 nodes\nnum_nodes = 4\ncluster.scale(num_nodes)\nclient = Client(cluster)\nclient\n\n\n\n     \n    \n        Client\n        Client-1fad484f-bbc8-11ed-9274-fa163e16ef68\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: dask_jobqueue.SLURMCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://192.168.0.213:8787/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        SLURMCluster\n        39116ce7\n        \n            \n                \n                    Dashboard: http://192.168.0.213:8787/status\n                \n                \n                    Workers: 0\n                \n            \n            \n                \n                    Total threads: 0\n                \n                \n                    Total memory: 0 B\n                \n            \n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-5c613755-a2ec-4108-9ea6-678adcdceb3e\n            \n                \n                    \n                        Comm: tcp://192.168.0.213:43565\n                    \n                    \n                        Workers: 0\n                    \n                \n                \n                    \n                        Dashboard: http://192.168.0.213:8787/status\n                    \n                    \n                        Total threads: 0\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 0 B\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n\n    \n\n\n        \n    \n\n            \n        \n\n    \n\n\n\nDask will now spin our jobs up in anticipation for work to the scale that you specify.\nYou can check in on your jobs like you would with any other SLURM job with squeue.\n\n!squeue\n\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n              1637     batch Jupyter  mhar0048  R      42:23      1 mlerp-node05\n              1638     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1639     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1640     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1641     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n\n\nAlternatively, we can use the adapt method, which will let us scale out as we need the compute… and scale back when we’re idle letting others use the cluster.\nWe reccommend that you use the adapt method while you’re actively developing your code so that you don’t need to worry about cleaning up after yourself. The scale method can be used when you’re ready to run longer tests with higher utilisation.\n\ncluster.adapt(minimum=0, maximum=num_nodes)\n\n<distributed.deploy.adaptive.Adaptive at 0x7f85ea9ec820>\n\n\n\n# You may need to run this cell a few times while waiting for Dask to clean up\n!squeue\n\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n              1637     batch Jupyter  mhar0048  R      43:01      1 mlerp-node05\n\n\nDask has a UI that will let you see how the tasks are being computed. You won’t be able to connect to this with your web browser but VSCode and Jupyter have extensions for you to connect to it.\nUse the loopback address: http://127.0.0.1:8787 (Adjust the port to the one listed when you make the client if needed)\nNow let’s define a dask array and perform some computation. Dask arrays are parallelised across your workers nodes so they can be greater than the size of one worker’s memory. Dask evaluates lazily, retuning ‘futures’ which record the tasks needed to be completed in the compute graph. They can be computed later for its value.\nDask also has parallelised implementations of dataframes and collections of objects (called bags). These are written to be as similar as possible to familiar libraries like numpy, pandas and pyspark. You can read more about arrays, dataframes and bags with Dask’s documentation.\n\nimport dask.array as da\nx = da.random.random((1000, 1000, 1000))\nx  # Note how the value of the array hasn't been computed yet\n\n\n\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         7.45 GiB \n                         119.21 MiB \n                    \n                    \n                    \n                         Shape \n                         (1000, 1000, 1000) \n                         (250, 250, 250) \n                    \n                    \n                         Count \n                         64 Tasks \n                         64 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  1000\n  1000\n  1000\n\n        \n    \n\n\n\nYou can check squeue while this is running to see the jobs dynamically spinning up to perform the computation.\n\nx.compute()\n\narray([[[0.81048276, 0.98448871, 0.1733459 , ..., 0.56455782,\n         0.87080788, 0.13560115],\n        [0.34637436, 0.87259813, 0.94473364, ..., 0.93145702,\n         0.1192914 , 0.29108374],\n        [0.41857781, 0.83517549, 0.08113376, ..., 0.85804457,\n         0.37388268, 0.37722865],\n        ...,\n        [0.46583782, 0.61815175, 0.09393558, ..., 0.66240159,\n         0.49874618, 0.81926554],\n        [0.24346786, 0.60615724, 0.99073193, ..., 0.06461803,\n         0.00183846, 0.67093819],\n        [0.08790386, 0.83009404, 0.12218377, ..., 0.06221952,\n         0.02795862, 0.71642665]],\n\n       [[0.87904067, 0.08657706, 0.54566209, ..., 0.88747936,\n         0.67862782, 0.06280928],\n        [0.60127705, 0.16065682, 0.20523986, ..., 0.37973246,\n         0.63451103, 0.76550924],\n        [0.40090817, 0.03877228, 0.40892043, ..., 0.28284783,\n         0.08165901, 0.62547838],\n        ...,\n        [0.91598835, 0.60142513, 0.58315254, ..., 0.4106674 ,\n         0.39268422, 0.0359192 ],\n        [0.43570915, 0.86416062, 0.19947181, ..., 0.26959132,\n         0.56094108, 0.67045609],\n        [0.77048317, 0.05800286, 0.79154034, ..., 0.20123776,\n         0.03886638, 0.46688039]],\n\n       [[0.90154212, 0.21625038, 0.43767504, ..., 0.29003829,\n         0.53543812, 0.05813288],\n        [0.70823206, 0.15378265, 0.50122973, ..., 0.83336165,\n         0.62442109, 0.99706319],\n        [0.39972706, 0.45769274, 0.71225809, ..., 0.59740476,\n         0.88300199, 0.78174948],\n        ...,\n        [0.43426827, 0.70359092, 0.93161099, ..., 0.61153736,\n         0.64245218, 0.93093052],\n        [0.34932829, 0.18280574, 0.03849763, ..., 0.47254602,\n         0.16659474, 0.50385353],\n        [0.55394197, 0.93967812, 0.19042393, ..., 0.79276809,\n         0.63940768, 0.76911959]],\n\n       ...,\n\n       [[0.45786038, 0.85513896, 0.65277041, ..., 0.88640097,\n         0.1332642 , 0.46490542],\n        [0.73694782, 0.60710629, 0.9022453 , ..., 0.9449639 ,\n         0.96740867, 0.27902221],\n        [0.14930582, 0.50213856, 0.40821156, ..., 0.6946832 ,\n         0.23331898, 0.28920961],\n        ...,\n        [0.74158561, 0.45597372, 0.65007944, ..., 0.99970547,\n         0.8797445 , 0.07684269],\n        [0.89195394, 0.46038323, 0.23562025, ..., 0.94244266,\n         0.52660567, 0.39521149],\n        [0.5888601 , 0.81723018, 0.17045886, ..., 0.67048762,\n         0.56533708, 0.25716144]],\n\n       [[0.63473717, 0.18832603, 0.84891618, ..., 0.97606878,\n         0.21760161, 0.54201549],\n        [0.3529744 , 0.38462424, 0.81971622, ..., 0.2029358 ,\n         0.22444116, 0.65069545],\n        [0.62372702, 0.28351268, 0.0386723 , ..., 0.90500265,\n         0.59215861, 0.62802261],\n        ...,\n        [0.28551262, 0.41386426, 0.25409061, ..., 0.17632859,\n         0.41365254, 0.68635382],\n        [0.02055029, 0.98061086, 0.31100677, ..., 0.00492097,\n         0.35997751, 0.25151212],\n        [0.92746433, 0.53906131, 0.08237071, ..., 0.28546093,\n         0.4792113 , 0.75821124]],\n\n       [[0.13938191, 0.21151459, 0.82413647, ..., 0.98384943,\n         0.73570428, 0.86907216],\n        [0.00827752, 0.21515904, 0.45043764, ..., 0.20621184,\n         0.04521416, 0.84621095],\n        [0.05534646, 0.22239314, 0.46678384, ..., 0.44320404,\n         0.60471602, 0.24567299],\n        ...,\n        [0.44036848, 0.23792716, 0.5878868 , ..., 0.17130055,\n         0.57048327, 0.94820776],\n        [0.80744186, 0.71882324, 0.49240172, ..., 0.87435928,\n         0.65409874, 0.0039221 ],\n        [0.18796252, 0.27960799, 0.57753044, ..., 0.98543126,\n         0.89218506, 0.96359486]]])\n\n\nWe can also accelerate dask arrays with GPUs using cupy. There is similar support for accelerating dask dataframes with CuDF.\n\ndask.config.set({\"array.backend\": \"cupy\"})\ny = da.random.random((1000, 1000, 1000))\ny.compute()\n\narray([[[3.96333169e-03, 3.75975260e-01, 3.56959376e-01, ...,\n         4.50280915e-01, 2.35157391e-01, 7.94328044e-01],\n        [7.46712819e-01, 3.80351024e-02, 6.20411425e-01, ...,\n         4.25249481e-01, 1.79268928e-01, 4.18742215e-01],\n        [6.86661418e-01, 2.68955439e-01, 1.35690349e-01, ...,\n         6.07946338e-01, 5.99222969e-01, 9.05284417e-01],\n        ...,\n        [9.76543019e-01, 6.83623666e-01, 7.72140730e-02, ...,\n         5.01167957e-01, 9.58515852e-01, 5.07214775e-01],\n        [2.40601659e-01, 8.18106652e-01, 2.82227562e-01, ...,\n         4.40147690e-01, 2.40043011e-01, 7.48213851e-01],\n        [6.46267786e-01, 2.13913358e-01, 2.05269982e-01, ...,\n         8.90589693e-01, 5.19737573e-01, 9.10289392e-01]],\n\n       [[1.72304898e-01, 5.05337770e-01, 1.87073213e-01, ...,\n         6.76683193e-01, 1.69135886e-01, 2.43992433e-01],\n        [3.70932825e-01, 8.84938115e-01, 8.77260345e-01, ...,\n         4.57830983e-01, 5.27520536e-01, 2.01397156e-01],\n        [9.09455520e-01, 8.28202776e-01, 3.84134861e-01, ...,\n         8.07997870e-02, 4.24021864e-01, 8.34383254e-01],\n        ...,\n        [8.55113113e-01, 2.52211591e-01, 5.28010992e-01, ...,\n         8.19260228e-01, 2.82101588e-01, 8.39183043e-01],\n        [9.73137446e-01, 9.04520033e-01, 2.30853972e-01, ...,\n         4.23457838e-01, 7.94870403e-01, 1.00250089e-01],\n        [5.40579345e-01, 2.89968667e-01, 8.90332214e-01, ...,\n         6.70323229e-01, 7.73539876e-01, 8.15765293e-01]],\n\n       [[9.78069689e-01, 1.94483025e-01, 3.43399529e-01, ...,\n         4.02166898e-01, 6.71836852e-01, 9.52519632e-01],\n        [1.35657204e-03, 7.36432409e-02, 8.82288105e-01, ...,\n         2.36884145e-01, 2.10861265e-02, 4.61787761e-01],\n        [7.89820626e-01, 4.07889914e-01, 2.45503974e-01, ...,\n         4.62825525e-01, 5.82648973e-01, 3.43674022e-01],\n        ...,\n        [6.83155606e-01, 3.56633317e-01, 7.85189277e-01, ...,\n         9.94454587e-01, 7.13054153e-01, 3.45217158e-01],\n        [4.03539798e-01, 1.72588217e-01, 5.84980509e-02, ...,\n         3.99447478e-01, 5.61517474e-01, 4.41827263e-01],\n        [3.73142302e-01, 6.37492831e-01, 8.58445880e-01, ...,\n         2.94945156e-01, 7.04045362e-01, 6.42646469e-01]],\n\n       ...,\n\n       [[2.57379067e-02, 2.26092528e-01, 6.72177087e-01, ...,\n         1.03541559e-01, 7.04260574e-01, 3.09848467e-01],\n        [1.14911496e-01, 5.59038772e-01, 5.20089463e-01, ...,\n         5.98993990e-01, 2.97319738e-01, 2.12389183e-01],\n        [1.52607925e-01, 4.24765213e-01, 3.08108001e-01, ...,\n         3.70586265e-01, 1.03058160e-01, 8.31891440e-01],\n        ...,\n        [6.93327253e-01, 5.03617291e-01, 7.21311361e-01, ...,\n         4.75231608e-01, 4.14158400e-01, 1.13713830e-01],\n        [9.83901463e-02, 6.17394328e-02, 3.31051444e-01, ...,\n         3.18242299e-01, 5.28685022e-01, 1.00347141e-01],\n        [6.71486871e-01, 5.76711473e-02, 4.21947139e-01, ...,\n         8.98134777e-01, 9.62267196e-01, 4.09166441e-01]],\n\n       [[7.92228171e-01, 4.74861245e-01, 8.55582049e-01, ...,\n         2.01486700e-02, 2.35502699e-01, 4.10015940e-01],\n        [2.00915420e-01, 4.81461026e-01, 4.74642799e-01, ...,\n         9.93546874e-01, 2.16693458e-01, 2.86340839e-03],\n        [8.43810984e-01, 7.34739653e-01, 3.14340844e-01, ...,\n         6.44837946e-01, 4.85487627e-01, 3.75704414e-01],\n        ...,\n        [8.28949422e-01, 8.91638673e-01, 2.89596844e-01, ...,\n         7.15502825e-01, 5.78631295e-01, 7.86967250e-01],\n        [8.23241405e-01, 8.98084628e-01, 2.85672278e-01, ...,\n         6.20557458e-01, 5.81817995e-01, 2.52404515e-01],\n        [5.40497081e-01, 9.72915655e-01, 7.31110429e-01, ...,\n         5.08955347e-01, 6.97590461e-02, 5.89144368e-01]],\n\n       [[2.63822264e-01, 5.19700272e-01, 7.59760755e-01, ...,\n         6.18960236e-01, 8.61688534e-02, 6.81393559e-02],\n        [5.96324590e-01, 6.16036635e-01, 5.19938293e-01, ...,\n         6.44789632e-01, 7.99003165e-01, 5.07297511e-01],\n        [6.29738591e-04, 9.50428411e-01, 9.89160098e-01, ...,\n         9.91761810e-01, 8.79419963e-01, 5.79882246e-03],\n        ...,\n        [3.35997130e-01, 7.22035458e-01, 5.61892255e-01, ...,\n         3.84637676e-01, 8.86357871e-01, 3.79967524e-01],\n        [4.80935276e-01, 7.47906202e-01, 9.82953759e-01, ...,\n         4.06516152e-01, 9.77525540e-01, 6.24499056e-02],\n        [8.34387920e-02, 9.02366972e-02, 9.74848083e-01, ...,\n         9.40563574e-01, 6.10587311e-01, 8.08475318e-01]]])\n\n\nFinally, we can shut down the SLURMCluster now that we’re done with it.\n\n# Shut down the cluster\nclient.shutdown()"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "MLeRP FAQ",
    "section": "",
    "text": "Say we have a researcher who is a domain expert in a field and is just discovering that machine learning algorithms might be appropriate to accelerate their work. They explore online for potential approaches and even find some tutorials that use interactive environments, but quickly discover that dealing with large datasets requires more compute than their laptop can handle so they need to move to a HPC system. While desktop sessions are available they might have prohibitively long queues and have low utilisation of the underlying hardware. They could submit a job to the HPC queue but this leads to long times between iterations. At this stage the researcher is still discovering things about their data, how to clean it and how to analyse it.\nThey need an interactive environment so they can develop and debug their algorithms and the algorithms, but still need access to high powered acceleration so they can process their dataset. At the same time we want to improve utilisation of the hardware so that we can serve more users and reduce wait times.\nMLeRP was built to be a middle ground that has the interactivity of a notebook with the power of a HPC environment that can share valuable resources between other users while code isn’t being executed.\nNow our new researcher can easily import the same code that they were using on their laptops or with online notebook services straight into a HPC environment without the need to convert it first into a SBATCH script, wait in long HPC queues or load modules for dependencies."
  },
  {
    "objectID": "faq.html#why-do-i-still-have-to-wait-in-queue",
    "href": "faq.html#why-do-i-still-have-to-wait-in-queue",
    "title": "MLeRP FAQ",
    "section": "Why do I still have to wait in queue?",
    "text": "Why do I still have to wait in queue?\nDirectly attaching GPU compute to notebooks leads to very low utilisation since the GPU sits idle while you’re debugging your code. By using a queue we are able to service more researchers at once with greater efficiency."
  },
  {
    "objectID": "faq.html#if-i-still-have-to-wait-in-queue-how-is-this-better-than-using-a-traditional-hpc-environment",
    "href": "faq.html#if-i-still-have-to-wait-in-queue-how-is-this-better-than-using-a-traditional-hpc-environment",
    "title": "MLeRP FAQ",
    "section": "If I still have to wait in queue how is this better than using a traditional HPC environment?",
    "text": "If I still have to wait in queue how is this better than using a traditional HPC environment?\nMLeRP is designed with the idea that a job’s size should be about the size of a cell in a jupyter notebook. With that in mind, the queue has been optimised for short jobs, with a wall time of |NEED TO WORK OUT|. Executing a cell won’t always be immediate but your job should start up pretty quickly. If you need to run a job that runs longer than this, checkpoint your code and split it into multiple jobs. If your job takes longer than |NEED TO WORK OUT|, contact us at |EMAIL HERE|"
  },
  {
    "objectID": "faq.html#why-dask",
    "href": "faq.html#why-dask",
    "title": "MLeRP FAQ",
    "section": "Why Dask?",
    "text": "Why Dask?\nWe looked at a few different options for the MLeRP environment including Sagemaker, Spark and Ray. Ultimately we settled on Dask as the primary tool to interface with the queue because:\n\nSLURM jobs can be submitted with SLURMCluster whenever HPC is needed\nDebugging can be done locally first with LocalCluster with minimal code change\nIt has a familiar syntax as it’s designed as a light wrapper around common libraries like Numpy, Pandas and SciKit-Learn\nHigh level applications can be implemented easily with Scikit-Learn, XGBoost, Skorch, SciKeras\nDask can submit any python function to the SLURM queue allowing the flexibility for bespoke low level applications\nLazy evaluation of functions which allows for asynchronous code"
  },
  {
    "objectID": "faq.html#will-i-need-to-change-my-code-to-work-with-mlerp",
    "href": "faq.html#will-i-need-to-change-my-code-to-work-with-mlerp",
    "title": "MLeRP FAQ",
    "section": "Will I need to change my code to work with MLeRP?",
    "text": "Will I need to change my code to work with MLeRP?\nYes. Dask unfortunately does not come for free, you will have to do some code change to use it to interface with the cluster. You will also need to get a sense of SLURM ’s parameters defaults but it is\nThat said we believe that this approach of submitting jobs through a python notebook environment will feel more familiar to researchers familiar with the python datascience ecosystem given how Dask is designed as a light wrapper around common libraries like numpy, pandas and Scikit-Learn.\nYou will also be able to work with the cluster without needing to convert your experimental notebook code into a script and maintain the environment with modules like with a traditional cluster."
  },
  {
    "objectID": "faq.html#why-arent-my-print-statements-showing-up-in-my-jobs",
    "href": "faq.html#why-arent-my-print-statements-showing-up-in-my-jobs",
    "title": "MLeRP FAQ",
    "section": "Why aren’t my print statements showing up in my jobs?",
    "text": "Why aren’t my print statements showing up in my jobs?\nPrint statements that are executed on remote machines won’t show up in your notebook. If you are using print statements for debugging, consider using a LocalCluster where they will behave as expected.\nIf you need to record information while code is executing remotely either pass the information back to the notebook when the function returns for it to be printed, or log the output to a file."
  },
  {
    "objectID": "faq.html#how-much-compute-should-i-ask-for-with-my-slurmcluster",
    "href": "faq.html#how-much-compute-should-i-ask-for-with-my-slurmcluster",
    "title": "MLeRP FAQ",
    "section": "How much compute should I ask for with my SLURMCluster?",
    "text": "How much compute should I ask for with my SLURMCluster?\nUnfortunately there is no one size fits all answer to this question. Every research problem has its on demands and constraints so this a bit like asking ‘How long is a piece of string?’.\nWith that being said, our GPU compute is split into |FLAVOURS| sizes and they are on nodes with |THIS MUCH RAM|. As a default it may make sense to start with a fraction of RAM that is proportional to your chosen GPU size.\nIf your work is primarily CPU bound, Dask allows as many tasks as you have CPU cores, but if you are using GPUs you may want to dramatically limit this. One process per GPU could be a good place to start.\nFor more information about using SLURMCluster, visit Dask’s documentation"
  },
  {
    "objectID": "faq.html#should-i-use-cluster.scale-or-cluster.adapt",
    "href": "faq.html#should-i-use-cluster.scale-or-cluster.adapt",
    "title": "MLeRP FAQ",
    "section": "Should I use cluster.scale or cluster.adapt?",
    "text": "Should I use cluster.scale or cluster.adapt?\nWe reccommend that you use the adapt method while you’re actively developing your code so that you don’t need to worry about cleaning up after yourself. The scale method can be used when you’re ready to run longer tests with higher utilisation."
  },
  {
    "objectID": "faq.html#how-do-i-install-my-favourite-python-package",
    "href": "faq.html#how-do-i-install-my-favourite-python-package",
    "title": "MLeRP FAQ",
    "section": "How do I install my favourite python package?",
    "text": "How do I install my favourite python package?\nIf you want to control the python environment we recommend that you install and maintain a miniconda environment in your userdata directory."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the MLeRP User guide",
    "section": "",
    "text": "The MLeRP environment creates a middle ground that has the interactivity of a notebook with the power of a HPC environment that can share valuable resources between other users while code isn’t being executed.\nWe provide users with CPU based Jupyter notebook sessions capable of basic analysis, with the ability to interactively send jobs to a SLURM queue for GPU or parallelised CPU acceleration through Dask.\nBe sure to check out the Jupyter, SLURM and Dask documentation for more information.\nMLeRP at the moment is only available through closed beta but is planned to be available through open beta to all Australian researchers. You can sign up to our mailing list if you’d like us to let you know when we’re ready for open beta.\n\n\nLog in\n\n\nSign up\n\n\n\n\nContact us\nWant to get in touch with the developers? You can reach us at: EMAIL HERE"
  }
]