[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Say we have a researcher who is a domain expert in a field and is just discovering that machine learning algorithms might be appropriate to accelerate their work.\n\n\n\nThey explore online for potential approaches and even find some tutorials that use interactive environments, but quickly discover that dealing with large datasets requires more compute than their laptop can handle so they need to move to a HPC system.\n\n\n\nWhile desktop sessions are available they might have prohibitively long queues and have low utilisation of the underlying hardware. They could submit a job to the HPC queue but this leads to long times between iterations. At this stage the researcher is still discovering things about their data, how to clean it and how to analyse it.\n\n\n\nThey need an interactive environment so they can develop and debug their algorithms and the algorithms, but still need access to high powered acceleration so they can process their dataset. At the same time we want to improve utilisation of the hardware so that we can serve more users and reduce wait times.\nMLeRP was built to be a middle ground that has the interactivity of a notebook with the power of a HPC environment that can share valuable resources between other users while code isn’t being executed.\n\n\n\n\n\n\nNow our new researcher can easily import the same code that they were using on their laptops or with online notebook services straight into a HPC environment without the need to convert it first into a SBATCH script, wait in long HPC queues or load modules for dependencies."
  },
  {
    "objectID": "about.html#what-is-mlerp",
    "href": "about.html#what-is-mlerp",
    "title": "About",
    "section": "",
    "text": "Say we have a researcher who is a domain expert in a field and is just discovering that machine learning algorithms might be appropriate to accelerate their work.\n\n\n\nThey explore online for potential approaches and even find some tutorials that use interactive environments, but quickly discover that dealing with large datasets requires more compute than their laptop can handle so they need to move to a HPC system.\n\n\n\nWhile desktop sessions are available they might have prohibitively long queues and have low utilisation of the underlying hardware. They could submit a job to the HPC queue but this leads to long times between iterations. At this stage the researcher is still discovering things about their data, how to clean it and how to analyse it.\n\n\n\nThey need an interactive environment so they can develop and debug their algorithms and the algorithms, but still need access to high powered acceleration so they can process their dataset. At the same time we want to improve utilisation of the hardware so that we can serve more users and reduce wait times.\nMLeRP was built to be a middle ground that has the interactivity of a notebook with the power of a HPC environment that can share valuable resources between other users while code isn’t being executed.\n\n\n\n\n\n\nNow our new researcher can easily import the same code that they were using on their laptops or with online notebook services straight into a HPC environment without the need to convert it first into a SBATCH script, wait in long HPC queues or load modules for dependencies."
  },
  {
    "objectID": "compute.html",
    "href": "compute.html",
    "title": "MLeRP User Guide Documentation",
    "section": "",
    "text": "MLeRP is split into two regions which users can choose between - one based in Monash (Melbourne, Victoria) and one based in QCIF (Brisbane, Queensland). The clusters have seperate file systems, so you will have to transfer your files across if you’d like to switch regions."
  },
  {
    "objectID": "compute.html#monash",
    "href": "compute.html#monash",
    "title": "MLeRP User Guide Documentation",
    "section": "Monash",
    "text": "Monash\nThe Monash region is designed to be flexible. Users use CPU notebook or terminal sessions along with a Dask scheduler as an interface to the HPC system. This allows users to change the amount of compute they request are using entirely within the notebook and return valuable resources when they no longer need it. See this FAQ for advice on requesting resources through the Dask scheduler.\nMonash workloads are also able to make use of attached NVME for temporary file storage.\nNotebook or terminal sessions in three sizes:\n\nSmall\n\n4 VCPUs\n16 GB RAM\n\nMedium\n\n8 VCPUs\n32 GB RAM\n\n\nLarge\n\n8 VCPUs\n64 GB RAM\n\n\nSix nodes with:\n\n54 VCPUs\n460 GB RAM\n1.5 TB NVME\n2 A100s, each split with MIG into:\n\n1 20 GB VRAM\n2 10 GB VRAM"
  },
  {
    "objectID": "compute.html#qcif",
    "href": "compute.html#qcif",
    "title": "MLeRP User Guide Documentation",
    "section": "QCIF",
    "text": "QCIF\nThe QCIF region uses a more traditional approach with A100 GPU enabled notebook or terminal sessions. This user experience is much closer to using a service like Google Colab.\nGPU notebook or terminal sessions in three sizes:\n\nRegular\n\n20 VCPUs\n190 GB RAM\n10 GB VRAM\n\nDouble\n\n20 VCPUs\n190 GB RAM\n20 GB VRAM\n\nNode\n\n60 VCPUs\n570 GB RAM\n2x 10 GB VRAM + 1x 20 GB VRAM"
  },
  {
    "objectID": "connecting/aaf.html",
    "href": "connecting/aaf.html",
    "title": "AAF",
    "section": "",
    "text": "MLeRP is available to all Australian academic researchers through the Australian Access Federation (AAF). AAF is a not for profit organisation that enables access to online resources, like MLeRP, to Australian educators and researchers.\nThis means that rather than configuring a password to access MLeRP, you will be able to use your organisation’s single sign on to access MLeRP. AAF has been integrated with MLeRP’s web portal, Strudle as well as the SSOSSH key managment system."
  },
  {
    "objectID": "connecting/ssossh.html",
    "href": "connecting/ssossh.html",
    "title": "SSOSSH",
    "section": "",
    "text": "SSOSSH is a tool that brings single sign on to MLeRP. You can use it as an alternative to managing SSH keys when connecting via VS Code or your terminal.\nThe tool works by generating an SSH Certificate rather than the usual approach of adding a public key to the list of authorised keys. This is more secure since the certificate will only be valid for 24 hours, requiring you to go through your organisation’s single sign on again to renew the certificate.\nThis also means that you will no longer need to add your key manually since this will be handled automatically.\nYou can read more about usage details at it’s GitHub Repo.\nYou can pip install SSOSSH with:\npip install git+https://github.com/mitchellshargreaves-monash/ssossh\nor if you want to test an experimental feature:\npip install git+https://github.com/mitchellshargreaves-monash/ssossh@branch-name"
  },
  {
    "objectID": "connecting/strudel2.html",
    "href": "connecting/strudel2.html",
    "title": "Strudel 2",
    "section": "",
    "text": "Strudel2 is an interactive environment to develop supports two types of jobs. You will be able to reach it from https://mlerp.cloud.edu.au/.\nIt will allow you check the cluster’s usage and your disk quota. You will also be able to launch interactive jobs on the cluster. Strudel2 offers two kinds of interactive jobs: terminal and jupyter lab."
  },
  {
    "objectID": "connecting/strudel2.html#terminal-jobs",
    "href": "connecting/strudel2.html#terminal-jobs",
    "title": "Strudel 2",
    "section": "Terminal Jobs",
    "text": "Terminal Jobs\nTerminal jobs gives you some requested compute attached to a simple text UI. This is ideal if you prefer writing python scripts or running experiments that don’t require a GUI.\nYou can also launch the web terminal attached to the login node if you just need a quick terminal to manage your files, however this is a shared resource with limited compute."
  },
  {
    "objectID": "connecting/strudel2.html#jupyter-lab",
    "href": "connecting/strudel2.html#jupyter-lab",
    "title": "Strudel 2",
    "section": "Jupyter Lab",
    "text": "Jupyter Lab\nJupyter Lab jobs gives you some requested compute attached to a Jupyter Lab IDE. This is ideal if you prefer experimenting in python notebooks or visualising data with a GUI.\nIf you prefer using VS Code to the Jupyter Lab IDE you can also connect to this job with the Remote Development Extension Pack. For more details see our page on connecting via VS Code."
  },
  {
    "objectID": "connecting/strudel2.html#conda-environments",
    "href": "connecting/strudel2.html#conda-environments",
    "title": "Strudel 2",
    "section": "Conda Environments",
    "text": "Conda Environments\nWe’ve provided two environments for you to explore the platform and get started right away:\n\nThe ‘base’ environment which aims is a minimal installation of jupyter lab.\nThe Data Science Kitchen Sink (DSKS) which is an environment with many typical packages for analysis and machine learning\n\nYou can visit this page for a complete list of packages and versions in each environment.\nIf our conda environments don’t meet your needs, you can consider maintaining your own miniconda or mambaforge installation in your home directory. Once you’re happy with your environment you can point Strudel2 to your environment by edditing your apps.json file which can be found in the .strudel2 folder in your home directory.\nStrudel2 will append the new app you’ve configured below An example apps.json template has been provided below:\n[\n    { \n        \"url\": null,\n        \"name\": \"Custom Jupyter Lab\",\n        \"desc\": \"This is a custom Jupyter Lab container defined in a user's directory.\",\n        \"startscript\": \"#!/bin/bash\\n/apps/strudel2/strudel_apps/jupyter/custom_env.sh /PATH/TO/YOUR/CONDA/INSTALL/ CONDA_ENV_NAME\",\n        \"instactions\": [\n            {\n                \"name\": \"Connect\",\n                \"paramscmd\": \"/apps/strudel2/strudel_apps/jupyter/params_cmd.py {jobid} 2&gt;/dev/null\",\n                \"client\": {\n                    \"cmd\": null,\n                    \"redir\": \"?token={token}\"\n                },\n                \"states\": [\n                    \"RUNNING\"\n                ]\n            },\n            {\n                \"name\": \"Remove log\",\n                \"paramscmd\": \"rm ~/.strudel2-*{jobid}.out ; echo []\",\n                \"client\": null,\n                \"notunnel\": true,\n                \"states\": [\n                    \"Finished\"\n                ]\n            }\n        ],\n        \"localbind\": true,\n        \"applist\": null\n    }\n]\nYou can edit the name and description fields to suit your environment for your reference. You will also need to edit the path to your conda installation and the environment name you’d like to activate. Note that to use the strudel Jupyter Lab application you will need to make sure the jupyterlab package is installed in your environment. If you’d like to point Strudel2 to more than one environment, simply append another object to the list."
  },
  {
    "objectID": "connecting/strudel2.html#faq",
    "href": "connecting/strudel2.html#faq",
    "title": "Strudel 2",
    "section": "FAQ",
    "text": "FAQ\n\nWhy can’t I connect to Jupyter Lab?\nJupyter Lab needs to be able to create files to run properly. If your disk quota is completely full, it will create empty files that will confuse the system. To fix this, ssh into the cluster or use a terminal job to reduce your disk usage back under quota, then delete the empty files which will be found at /home/&lt;USERNAME&gt;/.local/share/jupyter/runtime.\nThere is also a known bug where Brave’s ‘shield’ feature will block the Strudel2 Jupyter application. To bypass this, you’ll need to turn off ‘shields’ for both the strudel2 home page and the strudel2 api."
  },
  {
    "objectID": "connecting/transferring_files.html",
    "href": "connecting/transferring_files.html",
    "title": "Transferring Files",
    "section": "",
    "text": "MLeRP does not have a dedicated data transfer node. We recommend that you use the login node when managing your files."
  },
  {
    "objectID": "connecting/transferring_files.html#jupyter-lab",
    "href": "connecting/transferring_files.html#jupyter-lab",
    "title": "Transferring Files",
    "section": "Jupyter Lab",
    "text": "Jupyter Lab\nThe easiest option to move files into the MLeRP environment is to use a Jupyter Lab job through Strudle2 since it requires no additional setup. You should be able to drag and drop files into the filetree on the left though it comes with some limitations.\nJupyter Lab does not support transferring folders, so you will need to either zip your files first or create your desired structure first and drop in the files later. You can still select multiple files and drag and drop all of them at once. It also only supports dropping files into the directory you are viewing."
  },
  {
    "objectID": "connecting/transferring_files.html#vs-code",
    "href": "connecting/transferring_files.html#vs-code",
    "title": "Transferring Files",
    "section": "VS Code",
    "text": "VS Code\nIf you have already gone through the steps to connect your VS Code you can drag and drop files into the filetree just like with Jupyter Lab, but VS Code will allow you to drop whole folders at once, including nested folders. You can control where the files and folders end up by hovering over the desired folder."
  },
  {
    "objectID": "connecting/transferring_files.html#rsync",
    "href": "connecting/transferring_files.html#rsync",
    "title": "Transferring Files",
    "section": "rsync",
    "text": "rsync\nIf you’re familiar with the terminal you can use rsync to synchronise file systems and to transfer large amounts of files, with the ability to stop and restart the file transfers. rsync will replicate all files in a folder from one spot to another. It first analyses both file systems to find the difference and then transfers only the changes.\nA typical command to synchronise files from a local folder to MLeRP is:\nrsync -auv -e ssh adirectory &lt;username&gt;@mlerp-login0.mlerp.cloud.edu.au:~/destinationdirectory/ rsync is very powerful and has many options to help transfer data. For example it can delete unwanted files (–delete), compress data before transfer (-z) or can you let you see what command options might do without actually executing them (–dry-run). For more info on rsync try man rsync."
  },
  {
    "objectID": "connecting/vscode.html",
    "href": "connecting/vscode.html",
    "title": "VS Code",
    "section": "",
    "text": "So you’d like to use Visual Studio Code, but you need access to MLeRP too - maybe your data is on the cluster, or you want to run code interactively on a GPU, or you just really love VS Code. No problem. You want a VS Code remote server.\nPlease DO NOT follow the official VS Code documentation for remote servers.\nBy default, if you follow those instructions, you will end up running the VS Code remote server on the login node.\nPlease don’t do this, the login nodes are a shared resource and we would rather allocate a resource just for you.\nInstead, please use this proxy command which will forward your connection to our compute nodes rather than the login node. This will connect to a Jupyter Lab job, or if one doesn’t exist, it will make one for you.\nProxyCommand=\"ssh &lt;username&gt;@mlerp-login0.mlerp.cloud.edu.au /usr/local/sv2/sshnc.sh\"\nNote that you will need to authenticate with your ssh key/cert, either through your authorized keys file or by generating a cert with ssossh. You can then add it to your agent or provide it to the ssh command (and proxy command) with the -i flag.\nIf you’re not sure how to use a proxy command, read on and we’ll walk you through the steps."
  },
  {
    "objectID": "connecting/vscode.html#introduction",
    "href": "connecting/vscode.html#introduction",
    "title": "VS Code",
    "section": "",
    "text": "So you’d like to use Visual Studio Code, but you need access to MLeRP too - maybe your data is on the cluster, or you want to run code interactively on a GPU, or you just really love VS Code. No problem. You want a VS Code remote server.\nPlease DO NOT follow the official VS Code documentation for remote servers.\nBy default, if you follow those instructions, you will end up running the VS Code remote server on the login node.\nPlease don’t do this, the login nodes are a shared resource and we would rather allocate a resource just for you.\nInstead, please use this proxy command which will forward your connection to our compute nodes rather than the login node. This will connect to a Jupyter Lab job, or if one doesn’t exist, it will make one for you.\nProxyCommand=\"ssh &lt;username&gt;@mlerp-login0.mlerp.cloud.edu.au /usr/local/sv2/sshnc.sh\"\nNote that you will need to authenticate with your ssh key/cert, either through your authorized keys file or by generating a cert with ssossh. You can then add it to your agent or provide it to the ssh command (and proxy command) with the -i flag.\nIf you’re not sure how to use a proxy command, read on and we’ll walk you through the steps."
  },
  {
    "objectID": "connecting/vscode.html#set-up-instructions-only-do-these-once",
    "href": "connecting/vscode.html#set-up-instructions-only-do-these-once",
    "title": "VS Code",
    "section": "Set-Up Instructions (only do these once)",
    "text": "Set-Up Instructions (only do these once)\n\n1. Prepare VS Code\n\nInstall Visual Studio Code\nInstall the Remote Development Extension Pack\nOpen Settings with Ctrl+, and search for Remote.SSH: Remote Server Listen On Socket. Select the checkbox. \n\n\n\n2. Generate an ssh key and add it to the ssh agent\nYou may be familiar with using passwords to authenticate to MLeRP - ssh keys are another, more secure method of doing this. If you’re unfamiliar with ssh keys, no worries - we’ll step you through how to set one up here. If you want to learn more about why ssh keys are more secure than passwords, this YouTube video does a good job of explaining it, even if it is designed for an AWS user.\nThe process for creating keys and adding them to your ssh agent differs between Windows and Linux/Mac.\n\n\nMac and Linux\n\n\nNote: These instructions will refer to your local terminal, as well as the Strudel2 terminal. Pay attention!\nFirstly, we need to generate an ssh key-pair. Open a local terminal, and run the following command:\nssh-keygen -t ed25519\nYou will be asked where you would like to save the keys. Press enter to keep the default location. You will also be asked to enter a passphrase. This will be used to encrypt the private key on your computer. There will be a print out of your key’s fingerprint and location on the screen.\nYou should now have a public and private key in your ~/.ssh directory, which will be named id_ed25519.pub and id_ed25519 respectively. Never share your private key with someone else.\nSecondly, you will need to copy your public key into MLeRP. To do this, run the following command:\ncat ~/.ssh/id_ed25519.pub                                  \nCopy the line of text printed on the screen.\nStart a terminal session in Strudel2 by selecting Terminal from the sidebar on the left-hand side of the screen, and then selecting Run on Login Node. This will open a terminal on MLeRP in a new tab. Ensure you have copied the public key from before, and run the following command in the Strudel2 terminal:\necho &lt;paste the line you just copied&gt; &gt;&gt; .ssh/authorized_keys\nThis will add your public key to MLeRP and allow you to authenticate using your new ssh-keys. Close the terminal tab and terminate the terminal session.\nFinally, you will want to add your ssh keys to the ssh-agent. You will remember setting a passphrase earlier for accessing your private key. When you add a private key to the ssh-agent, it will ask for your passphrase once, and then remember it until the next time your computer reboots. This means you won’t need to enter a passphrase everytime you log in to MLeRP with your keys.\nTo do this, open a local terminal and run:\nssh-add ~/.ssh/id_ed25519\n\n\n\nWindows\n\n\n\nInstall and enable OpenSSH\nBefore we can generate keys on Windows, OpenSSH has to be installed and enabled.\n\nCheck OpenSSH is installed.\n\n\nNavigate to Setting &gt; Apps &gt; Apps & Features\nSelect Optional Features.\nCheck if OpenSSH Client is in the list. If it is, go to step 2.\nIf it isn’t, select the Add a feature button at the top of the page, then select OpenSSH Client, and Install. This will install the OpenSSH Client.\n\n\nOnce installed, you will need to start the OpenSSH Client.\n\n\nUse the Windows search bar to search for and open Services.\nScroll through the list to find OpenSSH Authentication Agent\nDouble click OpenSSH Authentication Agent. Change the Startup type to Automatic and select OK.\nDouble click on OpenSSH Authentication Agent again and select Start.\n\nThe OpenSSH Agent will start automatically in future. Now we can create your ssh keys!\n\n\nCreate ssh keys and add them to the ssh-agent\nNote: These instructions will refer to your local PowerShell terminal, as well as the Strudel2 terminal. Pay attention!\nFirstly, we need to generate an ssh key-pair. Open a Powershell terminal, and run the following command:\nssh-keygen -t ed25519\nYou will be asked where you would like to save the keys. Press enter to keep the default location. You will also be asked to enter a passphrase. This will be used to encrypt the private key on your computer. There will be a print out of your key’s fingerprint and location on the screen.\nYou should now have a public and private key in your ~/.ssh directory, which will be named id_ed25519.pub and id_ed25519 respectively. Never share your private key with someone else.\nSecondly, you will need to copy your public key into MLeRP. To do this, run the following command:\ncat ~/.ssh/id_ed25519.pub \nCopy the line of text printed on the screen.\nStart a terminal session in Strudel2 by selecting Terminal from the sidebar on the left-hand side of the screen, and then selecting Run on Login Node. This will open a terminal on MLeRP in a new tab. Ensure you have copied the public key from before, and run the following command in the Strudel2 terminal:\necho &lt;paste the line you just copied&gt; &gt;&gt; .ssh/authorized_keys\nThis will add your public key to MLeRP and allow you to authenticate using your new ssh-keys.\nFinally, you will want to add your ssh keys to the ssh agent. You will remember setting a passphrase earlier for accessing your private key. When you add a private key to the ssh-agent, it will ask for your passphrase once, and then remember it until the next time your computer reboots. This means you won’t need to enter a passphrase everytime you log in to MLeRP with your keys.\nCopy paste the location of your private key, which would have been printed on the screen in your PowerShell terminal earlier. For example, C:\\Users\\username/.ssh/id_ed25519. Run the following in your PowerShell terminal to add the key to your ssh-agent:\nssh-add ~/.ssh/id_ed25519"
  },
  {
    "objectID": "connecting/vscode.html#using-your-vs-code-remote-server-do-these-every-time-you-need-a-vs-code-session-on-var-cluster_name",
    "href": "connecting/vscode.html#using-your-vs-code-remote-server-do-these-every-time-you-need-a-vs-code-session-on-var-cluster_name",
    "title": "VS Code",
    "section": "Using your VS Code remote server (do these every time you need a VS Code session on MLeRP)",
    "text": "Using your VS Code remote server (do these every time you need a VS Code session on MLeRP)\n\n4. Allocate resources for the remote server (i.e. start a job)\nUsing Strudel2 in your web browser, login to CVL and select and Jupyter Lab based application. Choose the resources you will need, including GPU type, number of CPUs, amount of RAM and time, and click Launch. Wait for the job to begin running under Pending/Running Jupyter Labs.\n\n\n5. Test the connection\n\n\nLinux and Mac\n\n\nOpen a terminal and on Linux and Mac enter:\nssh -l &lt;username&gt; VSCode -o ProxyCommand=\"ssh &lt;username&gt;@mlerp-login0.mlerp.cloud.edu.au /usr/local/sv2/sshnc.sh\"\n\n\n\nWindows\n\n\nOn Windows, open a PowerShell terminal and enter:\nssh -l &lt;username&gt; VSCode -o ProxyCommand=\"ssh.exe &lt;username&gt;@mlerp-login0.mlerp.cloud.edu.au /usr/local/sv2/sshnc.sh\"\n\nVerify that you can connect to MLeRP. If you experience difficulties, this is the point to reach out to mlerphelp@gmail.com. This step will also prompt you to accept the public key for MLeRP.\n\n\n6. Start the remote server\nOpen VS Code and open the Command Palette (F1). Select Remote-SSH: Connect to Host from the dropdown menu and select the VSCode host. If you didn’t add the private ssh key to the agent, VS Code will prompt you for your key passphrase It will ask twice (once to the connect to the login nodes, then again to connect to the node running the remote server).\nVS Code will also ask you what type of server it is, select Linux.\nThen you should be good to go."
  },
  {
    "objectID": "connecting/vscode.html#faq",
    "href": "connecting/vscode.html#faq",
    "title": "VS Code",
    "section": "FAQ",
    "text": "FAQ\n\nI see a message about “Connection Reset by peer”.\nThis will happen if you fail to authenticate too many times - perhaps typing in your key passphrase incorrectly. Wait 10 minutes, and try again. If you still run into errors please contact the helpdesk at mlerphelp@gmail.com.\n\n\nI keep getting prompted for a password even though I’m using a key.\nCheck that your connection command includes the username everwhere you need it (it should be in there twice, once for the login node and once for the compute node). Also, ensure you added your keys to the ssh-agent to avoid typing your key passphrase every time. You will need to do this after every reboot.\n\n\nI got an error message about posix spawn.\nYou’re probably on Windows. Check that you used the Windows specific command line with ssh.exe instead of ssh\n\n\nI tried to use the ssh-agent but it says “Permissions mykey are too open.\nPrivate keys should never be shared - ensure only you have read, write, and execute permissions on your private key. Linux/Mac user see this StackOverflow post. Windows Users, see this blog post"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Why do I still have to wait in queue?\nDirectly attaching GPU compute to notebooks leads to very low utilisation since the GPU sits idle while you’re debugging your code. By using a queue we are able to service more researchers at once with greater efficiency.\n\n\nIf I still have to wait in queue how is this better than using a traditional HPC environment?\nMLeRP is designed with the idea that a job’s size should be about the size of a cell in a jupyter notebook. With that in mind, the queue has been optimised for short jobs. The maximum wall time of jobs in the MLeRP cluster is 30 minutes. Executing a cell won’t always be immediate but your job should start up pretty quickly. If you need to run a job that runs longer than this, checkpoint your code and split it into multiple jobs. If your code is mature enough that it makes more sense to run a multi-hour or multi-day job, consider using a traditional HPC service. Contact us at mlerphelp@gmail.com if your jobs aren’t starting promptly or your usecase isn’t covered by our platform and you think it should be. ### Why Dask? We looked at a few different options for the MLeRP environment including Sagemaker, Spark and Ray. Ultimately we settled on Dask as the primary tool to interface with the queue because:\n\nSLURM jobs can be submitted with SLURMCluster whenever HPC is needed\nDebugging can be done locally first with LocalCluster with minimal code change\nIt has a familiar syntax as it’s designed as a light wrapper around common libraries like Numpy, Pandas and SciKit-Learn\nHigh level applications can be implemented easily with Scikit-Learn, XGBoost, Skorch, SciKeras\nDask can submit any python function to the SLURM queue allowing the flexibility for bespoke low level applications\nLazy evaluation of functions which allows for asynchronous code\n\n\n\nWill I need to change my code to work with MLeRP?\nYes. Dask unfortunately will not ‘just work’, you will have to do some code change to use it to interface with the cluster. You will also need to get a sense of how to request resources from the cluster with SLURM.\nThat said we believe that this approach of submitting jobs through a python notebook environment will feel more familiar to researchers familiar with the python datascience ecosystem given how Dask is designed as a light wrapper around common libraries like numpy, pandas and Scikit-Learn.\nYou will also be able to work with the cluster without needing to convert your experimental notebook code into a script and maintain the environment with modules like with a traditional cluster.\n\n\nHow much compute should I ask for with my SLURMCluster?\nUnfortunately there is no one size fits all answer to this question. Every research problem has its on demands and constraints so this a bit like asking ‘How long is a piece of string?’.\nIf your work is primarily CPU bound, Dask allows as many tasks as you have CPU cores, but if you are using GPUs you may want to dramatically limit this. One process per GPU could be a good place to start.\nOur GPU compute is split into 10 GiB and 20 GiB sizes and they are on nodes with 640 GiB RAM. If you need a larger GPU flavour for your research, contact us at mlerphelp@gmail.com.\nHere are some default jobs sizes to consider:\nSmall GPU:\nSLURMCluster(memory=\"64g\", processes=1, cores=8, job_extra_directives=[\"--gres=gpu:10g:1\"])\nMulti GPU:\nSLURMCluster(memory=\"128g\", processes=1, cores=8, job_extra_directives=[\"--gres=gpu:10g:2\"])\nMedium GPU:\nSLURMCluster(memory=\"128g\", processes=1, cores=8, job_extra_directives=[\"--gres=gpu:20g:1\"])\nLarge CPU workload:\nSLURMCluster(memory=\"64g\", processes=16, cores=16)\nCPU multiprocessing (increase the scale appropriately with cluster.adapt):\nSLURMCluster(memory=\"4g\", processes=1, cores=1)\n\n\nWhy aren’t my print statements showing up in my jobs?\nPrint statements that are executed on remote machines won’t show up in your notebook. If you are using print statements for debugging, consider using a LocalCluster where they will behave as expected.\nIf you need to record information while code is executing remotely either pass the information back to the notebook when the function returns for it to be printed, or log the output to a file.\nFor more information about using SLURMCluster, visit Dask’s documentation\n\n\nShould I use cluster.scale or cluster.adapt?\nWe recommend that you use the adapt method while you’re actively developing your code so that you don’t need to worry about cleaning up after yourself. The scale method can be used when you’re ready to run longer tests with higher utilisation.\n\n\nHow do I install my favourite python package?\nIf you want to control the python environment we recommend that you install and maintain a miniconda environment in your userdata directory.\n\n\nWhat is a daemonic process and why can’t I run one?\nA daemon is a process that runs as a background process. Dask prefers to control all processes so that it can manage them more gracefully if they fail. If you need to take control of the multiprocessing yourself, you can turn this off with LocalCluster(processes=False) and SLURMCluster(nanny=False)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the MLeRP User Guide",
    "section": "",
    "text": "Artwork by Kiowa Scott-Hurly\n\n\nThe MLeRP environment creates a middle ground that has the interactivity of a notebook with the power of a HPC environment that can share valuable resources between other users while code isn’t being executed.\nWe provide users with CPU based Jupyter notebook sessions capable of basic analysis, with the ability to interactively send jobs to a SLURM queue for GPU or parallelised CPU acceleration through Dask.\nBe sure to check out the Jupyter, SLURM and Dask documentation for more information.\nMLeRP at the moment is only available through closed beta but is planned to be available through open beta to all Australian academic researchers through AAF. You can sign up to our mailing list if you’d like us to let you know when we’re ready for open beta.\nMLeRP has been made possible through ARDC funding. Thanks ARDC!\n\n\nLog in\n\n\nSign up\n\n\n\n\nContact us\nWant to get in touch with the developers? You can reach us at mlerphelp@gmail.com."
  },
  {
    "objectID": "tutorials/0_git_repos.html",
    "href": "tutorials/0_git_repos.html",
    "title": "",
    "section": "",
    "text": "You’ll need to connect your git remotes\nexample .ssh config provide git clone command for the docs\nlink to"
  },
  {
    "objectID": "tutorials/1_dask_slurm.html",
    "href": "tutorials/1_dask_slurm.html",
    "title": "Dask SLURMClusters",
    "section": "",
    "text": "The MLeRP notebook environment uses Dask SLURMClusters to create a middle ground that has the interactivity of a notebook backed by the power of HPC. You will be provisioned with a CPU based notebook session for your basic analysis and code development. Then, when you’re ready to run tests you will use Dask to submit your python functions to the SLURM queue.\nThis enables: - Flexibility to experiment with your dataset interactively - Ability to change compute requirements such as RAM, size of GPU, number of processes and so on… without ever leaving the notebook environment - Elastic scaling of compute - Efficient utilisation of the hardware - Releasing of resources when not in use\n\nfrom dask_jobqueue import SLURMCluster\nfrom distributed import Client, LocalCluster\nimport dask\n\n# Point Dask to the SLURM to use as it's back end\ncluster = SLURMCluster(\n    memory=\"64g\", processes=1, cores=8\n)\n\n# Scale out to 4 nodes\nnum_nodes = 4\ncluster.scale(num_nodes)\nclient = Client(cluster)\n\nDask will now spin our jobs up in anticipation for work to the scale that you specify.\nYou can check in on your jobs like you would with any other SLURM job with squeue.\n\n!squeue\n\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n              1637     batch Jupyter  mhar0048  R      42:23      1 mlerp-node05\n              1638     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1639     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1640     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n              1641     batch dask-wor mhar0048  R       0:16      1 mlerp-node05\n\n\nAlternatively, we can use the adapt method, which will let us scale out as we need the compute… and scale back when we’re idle letting others use the cluster.\nWe reccommend that you use the adapt method while you’re actively developing your code so that you don’t need to worry about cleaning up after yourself. The scale method can be used when you’re ready to run longer tests with higher utilisation.\n\ncluster.adapt(minimum=0, maximum=num_nodes)\n\n&lt;distributed.deploy.adaptive.Adaptive at 0x7f85ea9ec820&gt;\n\n\n\n# You may need to run this cell a few times while waiting for Dask to clean up\n!squeue\n\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n              1637     batch Jupyter  mhar0048  R      43:01      1 mlerp-node05\n\n\nDask has a UI that will let you see how the tasks are being computed. You won’t be able to connect to this with your web browser but VSCode and Jupyter have extensions for you to connect to it.\nUse the loopback address: http://127.0.0.1:8787 (Adjust the port to the one listed when you make the client if needed)\nNow let’s define a dask array and perform some computation. Dask arrays are parallelised across your workers nodes so they can be greater than the size of one worker’s memory. Dask evaluates lazily, retuning ‘futures’ which record the tasks needed to be completed in the compute graph. They can be computed later for its value.\nDask also has parallelised implementations of dataframes and collections of objects (called bags). These are written to be as similar as possible to familiar libraries like numpy, pandas and pyspark. You can read more about arrays, dataframes and bags with Dask’s documentation.\n\nimport dask.array as da\nx = da.random.random((1000, 1000, 1000))\nx  # Note how the value of the array hasn't been computed yet\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n7.45 GiB\n119.21 MiB\n\n\nShape\n(1000, 1000, 1000)\n(250, 250, 250)\n\n\nCount\n64 Tasks\n64 Chunks\n\n\nType\nfloat64\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nYou can check squeue while this is running to see the jobs dynamically spinning up to perform the computation.\n\nx[0][0][:10].compute()\n\narray([0.9527929 , 0.93675059, 0.11717679, 0.47114357, 0.73693508,\n       0.01302143, 0.86360879, 0.12592881, 0.52676823, 0.99186392])\n\n\nWe can also accelerate dask arrays with GPUs using cupy. There is similar support for accelerating dask dataframes with CuDF.\n\ndask.config.set({\"array.backend\": \"cupy\"})\ny = da.random.random((1000, 1000, 1000))\ny.compute()\ny[0][0][:10].compute()\n\narray([0.02380941, 0.62371184, 0.88393467, 0.8604588 , 0.16488854,\n       0.11214214, 0.86582312, 0.01384666, 0.79636323, 0.58940477])\n\n\nFinally, we can shut down the SLURMCluster now that we’re done with it.\n\n# Shut down the cluster\nclient.shutdown()"
  },
  {
    "objectID": "tutorials/2_dask_pytorch.html",
    "href": "tutorials/2_dask_pytorch.html",
    "title": "PyTorch and Dask",
    "section": "",
    "text": "Defining models, datasets and functions\nIf you’re doing something relatively simple, Dask has integrations with Scikit-Learn and XGBoost. You can also pass PyTorch models into Scikit-Learn with Skorch and TensorFlow models with SciKeras.\nBut if you need to do something more complex, Dask clusters can have python functions submitted to them to remotely execute code. This gives us the low level control to implement whatever bespoke algorithm we want and have it accelerated by remote GPUs.\nIn this example we’re going to write our own PyTorch functions to train a custom model on the CIFAR dataset. While we could do this with Skorch, we hope that this example gives you some idea of how Dask can be flexible enough for any applications that you need.\nContent adapted from the PyTorch CIFAR10 Tutorial\n\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.multiprocessing as mp\n\n# Define data transformations\ntransform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n\n# Define dataset and dataloader\nbatch_size = 1024\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n                                        download=True, transform=transform)\nvalidset = torchvision.datasets.CIFAR10(root='./data', train=False,\n                                        download=True, transform=transform)\n\n# Note that we need to set the multiprocessing context so that PyTorch doesn't get\n# PyTorch likes to use 'forking' while Dask uses 'spawn'\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n                                          shuffle=True, num_workers=16, multiprocessing_context=mp.get_context(\"fork\"))\nvalidloader = torch.utils.data.DataLoader(validset, batch_size=batch_size,\n                                          shuffle=True, num_workers=16, multiprocessing_context=mp.get_context(\"fork\"))\n\nFiles already downloaded and verified\nFiles already downloaded and verified\n\n\n\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Define loss function\ncriterion = nn.CrossEntropyLoss()\n\n# Define a simple conv net\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Convolutional layers\n        self.conv1 = nn.Conv2d(3, 16, 3, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(16, 16, 3, stride=1, padding=1)\n        self.conv3 = nn.Conv2d(16, 32, 3, stride=2, padding=1)\n        self.conv4 = nn.Conv2d(32, 32, 3, stride=1, padding=1)\n        self.conv5 = nn.Conv2d(32, 64, 3, stride=2, padding=1)\n        self.conv6 = nn.Conv2d(64, 64, 3, stride=1, padding=1)\n        \n        # Fully connected layers\n        self.fc1 = nn.Linear(4 * 4 * 64, 4 * 64)\n        self.fc2 = nn.Linear(4 * 64, 64)\n        self.fc3 = nn.Linear(64, 10)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        x = F.relu(self.conv3(x))\n        x = F.relu(self.conv4(x))\n        x = F.relu(self.conv5(x))\n        x = F.relu(self.conv6(x))\n        x = torch.flatten(x, 1)  # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nThis train function will load any saved state for the provided model, then train for a number of epochs. When its done it will then save the state and return the average loss of the last epoch.\nThere are also a few flags which have been included to show the printing and error handling behaviour of dask clusters.\n\nimport torch.optim as optim\nfrom tqdm.notebook import tqdm\n\n\n# loader: train dataloader\n# arch: model archetechture for training\n# path: model path for load and save\n# load: whether to load model from path\n# save: whether to save model to path\n# test: only run one batch for testing\n# error: throw an assertion error\n# return: average loss of epoch or loss of one batch if testing\ndef train(loader, arch=Net, path=\"./model\", epochs=1, load=False, save=True, test=False, error=False):\n    model = arch()\n    optimizer = optim.Adam(model.parameters(), lr=3e-4)\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    \n    # Load state from disk so that we can split up the job\n    if load: \n        state = torch.load(path, map_location=\"cpu\")\n        model.load_state_dict(state[\"model\"])\n        model.to(device)\n        optimizer.load_state_dict(state[\"optimizer\"])\n    else:\n        model.to(device)\n    \n    # A typical PyTorch training loop\n    model.train()\n    for _ in range(epochs):\n        running_loss = 0\n        \n        for i, (inputs, labels) in enumerate(loader):\n            # put the inputs on the device\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            # zero the parameter gradients\n            optimizer.zero_grad()\n\n            # forward + backward + optimize\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.detach().item()\n            \n            # Force an error\n            if error:\n                assert 0 == 1\n            \n            # Stop after one batch when testing        \n            if test: \n                print(\"When running in a local cluster you can see print statements\")\n                break\n    \n    # Save model after each epoch\n    if save:\n        torch.save({\n            \"model\": model.state_dict(),\n            \"optimizer\": optimizer.state_dict()\n            }, path)\n    \n    return running_loss / len(loader) if not test else loss.detach().item()\n\nThis valid function will load the state of the model we’ve defined, then calculate the average loss and accuracy over the dataset.\n\n# loader: train dataloader\n# arch: model archetechture for validating\n# path: model path for load and save\n# return: average loss and accuracy of epoch\ndef valid(loader, arch=Net, path=\"./model\"):\n    # Initialise device\n    model = arch()\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n    # Load state from disk so that we can split up the job\n    state = torch.load(path, map_location=\"cpu\")\n    model.load_state_dict(state[\"model\"])\n    model.to(device)\n    model.eval()\n    \n    # A typical PyTorch validation loop\n    running_loss = 0\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for i, (inputs, labels) in enumerate(loader):\n            # put the inputs on the device\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            # forward\n            outputs = model(inputs)\n            \n            # loss\n            loss = criterion(outputs, labels)\n            running_loss += loss.detach().item()\n            \n            # accuracy\n            _, predicted = torch.max(outputs.data, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    return running_loss / len(loader), correct / total\n\n\n\nTesting with a LocalCluster\nDask LocalClusters are easiest to use interactive development. This will mean that code will execute in the notebook session allowing you to view print statements and debug errors normally rather than dealing with remote code execusion before we’re ready. Later, when you are satisfied with your code you can switch over to a SLURMCluster to accelerate with GPU.\nDask prefers to control all processes so that it can manage them more gracefully if they fail, but we need to give PyTorch the control to use multiprocessing as needed. To do this set proccesses=False to allow for multiprocessing inside Dask jobs.\n\nfrom distributed import Client, LocalCluster\n\ncluster = LocalCluster(processes=False)\nclient = Client(cluster)\n\nWe can submit our function to the cluster with the client.submit method. This will return a future which can be unpacked with its result using future.result(). We can see the outputs of print statements while we’re using a LocalCluster. Print statements will not be visible when executing remotely with SLURMCluster.\n\nfuture = client.submit(train, trainloader, test=True)\nfuture.result()\n\n/userdata/mhar0048/miniconda/conda/envs/dask/lib/python3.10/site-packages/distributed/worker.py:2845: UserWarning: Large object of size 146.58 MiB detected in task graph: \n  [&lt;torch.utils.data.dataloader.DataLoader object at 0x7fa2783c7af0&gt;]\nConsider scattering large objects ahead of time\nwith client.scatter to reduce scheduler burden and \nkeep data on workers\n\n    future = client.submit(func, big_data)    # bad\n\n    big_future = client.scatter(big_data)     # good\n    future = client.submit(func, big_future)  # good\n  warnings.warn(\n\n\nWhen running in a local cluster you can see print statements\n\n\n2.3040761947631836\n\n\nWe can use the client.scatter method to scatter large objects out to our workers ahead of time for more efficient execution.\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader, test=True).result()\n\nWhen running in a local cluster you can see print statements\n\n\n2.3033735752105713\n\n\n\nclient.shutdown()\n\n\n\nTraining with a SLURMCluster\nDask usually uses a ‘nanny’ that monitors any worker processes and gracefully restarts them if they fail or are killed while performing computations. The nanny is not compatable with daemonic processes - that is dask workers cannot perform multiprocessing while it’s being used. We therefore need to set nanny=False to turn off the nanny to allow for multiprocessing inside Dask jobs for the cluster to work with PyTorch. (Just like when we processes=False for the LocalCluster.)\nWe can pass in extra SLURM requirements in job_extra_directives to request a GPU for our jobs. To read more about configuring the SLURMCluster to interact with the SLURM queue, go to Dask’s jobqueue documentation.\n\nfrom dask_jobqueue import SLURMCluster\nfrom distributed import Client\ncluster = SLURMCluster(\n    memory=\"190g\", processes=1, cores=20, job_extra_directives=[\"--gres=gpu:1\"], nanny=False\n)\n\ncluster.scale(1)\nclient = Client(cluster)\n\n/userdata/mhar0048/miniconda/conda/envs/dask/lib/python3.10/site-packages/distributed/node.py:179: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 34527 instead\n  warnings.warn(\n\n\nSince this code is executing remotely we won’t see our print statements\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader_future, test=True).result()\n\n2.3033061027526855\n\n\nDask will raise any errors that the process triggers locally, even when executing remotely\n\ntrainloader_future = client.scatter(trainloader)\nclient.submit(train, trainloader_future, error=True).result()\n\nAssertionError: \n\n\nFinally we can bring everything together and run our training loop.\n\n# Run the training loop\nepochs = 5\ntrainloader_future = client.scatter(trainloader)\nvalidloader_future = client.scatter(validloader)\nwith tqdm(total=(epochs)) as pbar:\n    for epoch in range(epochs):\n        train_loss = client.submit(train, trainloader_future, load=(epoch &gt; 0)).result()\n        valid_loss, accuracy = client.submit(valid, validloader_future).result()\n        pbar.update()\n        pbar.set_postfix(loss=train_loss)\n        print( f\"epoch: {epoch}, train_loss: {train_loss : .3f}, valid_loss: {valid_loss : .3f}, accuracy: {accuracy : .3f}\")\n\n\n\n\nepoch: 0, train_loss:  2.271, valid_loss:  2.142, accuracy:  0.206\nepoch: 1, train_loss:  2.019, valid_loss:  1.934, accuracy:  0.284\nepoch: 2, train_loss:  1.897, valid_loss:  1.834, accuracy:  0.322\nepoch: 3, train_loss:  1.816, valid_loss:  1.766, accuracy:  0.344\nepoch: 4, train_loss:  1.750, valid_loss:  1.700, accuracy:  0.368\n\n\n\n\nMeasuring Dask’s overhead\nOffloading tasks to Dask doesn’t come for free, there is an initial cost associated with sending the data to a remote device. Let’s compare the time it would take to train a Resnet18 on CIFAR for a range of epochs comparing a local GPU, a remote GPU using Dask and a remote GPU using Dask with a scattered dataset. For this expriment we will not bother saving the weights afterwards since this should be relatively constant between methods.\n\nfrom torchvision.models import resnet18\nfrom time import time\n\n# Store times in arrays\nlocal = []\nremote = []\nscatter = []\n\n# Test some number of epochs\nepoch_list = [1, 2, 3, 5, 10]\nwith tqdm(total=(len(epoch_list) * 3)) as pbar:\n    for num_epochs in epoch_list:\n        \n        # Local GPU\n        start = time()\n        train(trainloader, arch=resnet18, epochs=(num_epochs + 1), save=False)\n        local.append(time() - start)\n        pbar.update()\n        \n        # Remote GPU\n        start = time()\n        client.submit(train, trainloader, arch=resnet18, epochs=(num_epochs + 1), save=False).result()\n        remote.append(time() - start)\n        pbar.update()\n        \n        # Remote GPU with scatter\n        start = time()\n        trainloader_future = client.scatter(trainloader)\n        client.submit(train, trainloader_future, arch=resnet18, epochs=(num_epochs + 1), save=False).result()\n        scatter.append(time() - start)\n        pbar.update()\n\n\n\n\n\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\ndata = list(chain(*zip(local, remote, scatter)))\ncolumns = []\nfor num_epochs in epoch_list:\n    for test in [\"local\", \"remote\", \"scatter\"]:\n        columns.append(test + \" \" + str(num_epochs))\n\nplt.bar(range(len(data)), data, tick_label=columns)\nplt.xticks(rotation=90)\nplt.xlabel(\"Experiment\")\nplt.ylabel(\"Seconds\")\nplt.title(\"Runtime comparison for local, remote and scatter\")\nplt.show()\n\n\n\n\nFrom this experiment we can see that the cost associated with running code remotely is small, and the impact decreases with the size of the function that we submit. It also shows that it always makes sense to scatter large objects before computing, even for small jobs.\n\nclient.shutdown()"
  }
]