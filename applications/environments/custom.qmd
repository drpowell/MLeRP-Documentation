---
title: Custom Conda Environments
---

## Introduction
If our conda environments don't meet your needs, you can consider maintaining your own [miniconda](https://docs.conda.io/en/latest/miniconda.html) or [mambaforge](https://mamba.readthedocs.io/en/latest/index.html) installation in your home directory.

Please **DO NOT** install this environment as you would on your desktop.

By default, this will initialise conda, which can interfere negatively with the functionality of batch submissions. Furthermore, it will then not interact with Strudel2.

### Conda vs Mamba
Conda is often used as a standard for maintaining python datascience environments, but because of the complexity of the environments typically needed, the conda solver can be known to hang (for 20 minutes or longer) especially if trying to install into an existing complicated environment, only to report that it was unable to solve due to version conflicts. 

Mamba is a parallelised C++ rewrite of the slowest parts of mamba, though while much faster (similar environments can solve in a minute or so), it can be unstable at times leading to unexpected errors.

Since a mamba installation comes compatible with conda and acts as a dropin replacement, we recommend that you start with a mambaforge installation and then fall back on conda commands whenever mamba fails. Simply replace the `mamba` keyword with `conda`.

In this tutorial we will cover installing a mambaforge environment.

### 1. Installing mambaforge
1. Following the recommendations on [mamba's installation page](https://mamba.readthedocs.io/en/latest/mamba-installation.html), we will be using the Mambaforge distribution.

2. Following the link through to the [download page](https://github.com/conda-forge/miniforge#mambaforge), copy the link for the following distribution:
   - OS: Linux
   - Architecture: x86_64 (amd64)

3. Using the [Strudel2 terminal application](/connecting/strudel2.qmd#terminal-jobs) or your favourite terminal application using [SSOSSH](/connecting/ssossh.qmd), log into the cluster.

4. Download the distribution to your home directory and run the installer
   ```bash
   # Replace this URL with the one you copied
   wget https://.../Mambaforge-Linux-x86_64.sh
   bash Mambaforge-Linux-x86_64.sh
   ```

5. Following the prompts from the installer:
   1. Accept the license agreement
   2. Choose where you'd like your installation to be kept.  
      (By default your home directory)

   The installer will prompt you to initislise conda. This is **NOT** recommended. 

   This will and edit the `.bashrc` so that it will activate when you log in, which can lead to unexpected interactions with batch jobs on cluster like {{< var cluster_name >}}.

   If you have done so by accident you can remove the additions to your `.bashrc` file manually (this is located in your home directory).

6. You can now activate your environment using one of the following commands:
   
   ```bash
   # Absolute paths are preferred for batch jobs or config files
   source /path/to/install/...mambaforge/bin/activate
   # Relative paths may be more convenient in everyday usage
   source ./mambaforge/bin/activate 
   # `.` works as a shorthand for the source command
   . ./mambaforge/bin/activate 
   ```

### 2. Installing your packages
Both mamba and conda environments are intended to leave their `base` environments untouched, so when maintaining your environments it is good practice to create a new one before installing any packages.

To encourage reproducability it is recommended to use an `environment.yml` file to maintain your packages. If you'd like a reference, the recipes to our environments are stored in `/apps/conda-envs`. 

We have created the `custom-base.yml` recipe for you to use as a minimal install that will be compatible with our Strudel2 apps. Alternatively, you could opt to use one of our other environments as a starting point.

1. Copy your chosen environment file to your home directory and modify it to suit your requirements. Make sure to uncomment the `pip` section if you need `pip`to install packages.

   ```bash
   cp /apps/conda-envs/custom-base.yml ~/custom.yml
   nano ~/custom.yml
   ```

2. Then create the environment off the file.
   
    ```bash
   mamba env create -f ~/custom.yml
   ```

3. You can then install packages manually if you're still experimenting with new packages, or update your install with the environment file.

   ```bash
   mamba install package_name
   pip install package_name
   mamba env update -f custom.yml
   ```

Conda's solver can result in different package versions if installing packages in a different order. Once you have confirmed which packages you need, it is good practice to work out an `environment.yml` that will build your environment in one command. 

Alternatively if your application requires multiple install stages, consider a script to build the environment so that your work is reproducible.

For more details about environment file syntax, have a look at conda's documentation on [managing environments](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).

### 3. Integrating with strudel2

Once you're happy with your environment you can point Strudel2 to your environment by editing your `apps.json` file. Strudel2 will append the new app you've configured after the apps that we provide for you.

An example `apps.json` template has been provided below:

```json
[
    { 
        "url": null,
        "name": "Custom Jupyter Lab",
        "desc": "This is a custom Jupyter Lab container defined in a user's directory.",
        "startscript": "#!/bin/bash\n/apps/strudel2/strudel_apps/jupyter/custom_env.sh /PATH/TO/YOUR/CONDA/INSTALL/ CONDA_ENV_NAME",
        "instactions": [
            {
                "name": "Connect",
                "paramscmd": "/apps/strudel2/strudel_apps/jupyter/params_cmd.py {jobid} 2>/dev/null",
                "client": {
                    "cmd": null,
                    "redir": "?token={token}"
                },
                "states": [
                    "RUNNING"
                ]
            },
            {
                "name": "Remove log",
                "paramscmd": "rm ~/.strudel2-*{jobid}.out ; echo []",
                "client": null,
                "notunnel": true,
                "states": [
                    "Finished"
                ]
            }
        ],
        "localbind": true,
        "applist": null
    }
]
```

1. Open your `apps.json` file and paste the template:

   ```bash
   nano ~/.strudel2/apps.json
   ```

2. Edit the following fields to suit your use case:
   1. The `name`  
      This will edit the displayed name in the Strudel2 menu
   2. The `desc`
      This will edit the displayed description at the top of the Strudel2 page when the app is selected
   3. The `startscript`
      This tells Strudel2 what to run when you launch the app. We will need to provide: 
      1. The full path to your installation
      2. Your custom environment name
   4. If you'd like to point Strudel2 to more than one environment, append another copy of the templated object to the list.